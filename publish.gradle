apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (FileNotFoundException ignore) {
}

// Maven Group ID for the artifact
group PROJ_GROUP
// This is the library version used when deploying the artifact
version PROJ_VERSION


bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = PROJ_NAME
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        vcsUrl = PROJ_VCSURL
        issueTrackerUrl = PROJ_ISSUETRACKERURL
        userOrg = user
        licenses = ['Apache-2.0']

        dryRun = false
        publish = true
        publicDownloadNumbers = true

        version {
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = properties.getProperty("bintray.oss.user") //OSS user token
                password = properties.getProperty("bintray.oss.password") //OSS user password
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }

    }
}
install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'

            name PROJ_NAME
            description PROJ_DESCRIPTION
            url PROJ_WEBSITEURL

            licenses {
                license {
                    name LICENSE_NAME
                    url LICENSE_URL
                }
            }
            developers {
                developer {
                    id DEVELOPER_ID
                    name DEVELOPER_NAME
                    email DEVELOPER_EMAIL
                }
            }
            scm {
                url PROJ_WEBSITEURL
                connection PROJ_VCSURL
                developerConnection PROJ_VCSURL
            }
        }
    }
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task syncJavadoc(type: Sync, dependsOn: javadoc) {
    from javadoc.destinationDir
    into rootProject.file('docs')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
