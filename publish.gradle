apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (FileNotFoundException ignore) {
}


bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = POM_ARTIFACT_ID
        userOrg = ORGANIZATION
        desc = LIBRARY_DESCRIPTION
        websiteUrl = SITE_URL
        vcsUrl = GIT_URL
        issueTrackerUrl = ISSUE_URL
        version {
            name = VERSION_NAME
            vcsTag = VERSION_NAME
        }
        licenses = ['Apache-2.0']

        publish = true
        publicDownloadNumbers = true
    }
}
//apply plugin: 'maven'
install {
    repositories.mavenInstaller {
//        repository(url: uri('./repository'))
        pom.project {
            packaging 'aar'

            groupId = GROUP
            artifactId = POM_ARTIFACT_ID
            version = VERSION_NAME

            name POM_NAME
            description LIBRARY_DESCRIPTION
            url SITE_URL

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    id DEVELOPER_ID
                    name DEVELOPER_NAME
                }
            }
            scm {
                url SITE_URL
                connection GIT_URL
                developerConnection GIT_URL
            }
        }
    }
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task syncJavadoc(type: Sync, dependsOn: javadoc) {
    from javadoc.destinationDir
    into rootProject.file('docs')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
